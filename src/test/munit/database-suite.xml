<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="database-suite.xml" />
	<munit:test name="tradelineFlow-ETL-test" doc:id="95ac71ca-8214-4229-971d-d00b0532ef77" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock fetch-data-from-service" doc:id="913af2d5-90ae-489c-9f9f-3ad97cb9feff" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a82f3b19-8356-491d-9531-8ab97537cbf4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://tradelineFlowETLtest/mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock create-database" doc:id="40b5eb3c-356e-46b9-beaf-2c5baf5162bc" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0b790a16-a33b-494e-b929-14444078e5cd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock fix-auto-increment-pk-database" doc:id="5d96a977-64fd-4d1a-ac5c-4f8c492b9c79" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="202c570a-392d-4bfa-a49f-bfcaca7effef" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock store-data-in-db" doc:id="827e39bf-9d15-46ef-bc2f-dd468268b552" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="195d800c-cb6d-40f9-8022-b79410b83a8e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload3.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock database-log-db-data" doc:id="f0acfb84-a447-4552-89a5-5c4734b77e0a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="beeeb5ee-48a1-436d-9669-7e7a25aa3e51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://tradelineFlowETLtest/mock_payload4.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="0fbafa6c-03d4-4ea7-b7f0-d8e5cb3d2e39" >
				<munit:payload value="#[readUrl('classpath://tradelineFlowETLtest/set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to tradelineFlow" doc:id="4e7c2470-8584-47d0-ab8e-dbe9004eb931" name="tradelineFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="68112f7e-bbd5-461c-8e08-8cf2773f562c" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import tradelineFlowETLtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="fetch-data-from-service-test" doc:id="2939603f-0aff-4630-95ea-fa74757165a3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="42590af7-243e-4a21-8971-042e55c0b7ac" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fc74a1a3-f9be-4cbd-a395-80368de06814" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/plain --- readUrl('classpath://fetchdatafromservicetest/mock_payload.dwl')]" mediaType="text/plain" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://fetchdatafromservicetest/mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="afea00fb-4b29-4c7b-b054-ffc8d55b75a9" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a1df5469-2737-40df-b422-13d4802041c6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="ec5f666b-398a-4ca1-b3f8-2cb7af12563e" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="f5ac851f-64c1-4538-96bb-86b1e4717aed" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="bdd94f22-28b6-4523-aecd-43bd75f03482" >
				<munit:payload value="#[output application/java --- readUrl('classpath://fetchdatafromservicetest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/java" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to fetch-data-from-service" doc:id="979a9279-785f-4fd7-8a86-603d6ef8bbaa" name="fetch-data-from-service"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="a2de11b1-1d1b-487c-85f7-ea7702d4dabe" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="581be865-3eba-40f2-8f58-17e4fe313464" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a1df5469-2737-40df-b422-13d4802041c6" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>