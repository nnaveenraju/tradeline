<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="database-suite.xml" />
	<munit:test name="tradelineFlow-ETL-test" doc:id="3b8f13eb-3d6a-41d6-a0cd-d73b4847b590" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock fetch-data-from-service" doc:id="ff6356e9-4dea-4105-8046-141bc671bc3d" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a82f3b19-8356-491d-9531-8ab97537cbf4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://tradelineFlowETLtest/mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock create-database" doc:id="416be857-398c-49af-8647-06faa19ddef0" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0b790a16-a33b-494e-b929-14444078e5cd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock fix-auto-increment-pk-database" doc:id="fc32d2f3-e116-4d6d-ae54-ab4fce15b48c" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="202c570a-392d-4bfa-a49f-bfcaca7effef" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock store-data-in-db" doc:id="dcaf8b44-8b23-40b5-a116-2b35479028a7" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="195d800c-cb6d-40f9-8022-b79410b83a8e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://tradelineFlowETLtest/mock_payload3.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock database-log-db-data" doc:id="9c1a410b-bc6f-4382-8ac4-31182c1aac1a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="beeeb5ee-48a1-436d-9669-7e7a25aa3e51" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://tradelineFlowETLtest/mock_payload4.dwl')]" mediaType="application/json" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="81c30116-d7a4-4fd1-9854-3c532511469e" >
				<munit:payload value="#[readUrl('classpath://tradelineFlowETLtest/set-event_payload.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to tradelineFlow" doc:id="1a45dc46-62f5-47d4-ae44-157041daa229" name="tradelineFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="74821d5e-7846-446a-9b97-03a574acf4a1" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import tradelineFlowETLtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="fetch-data-from-service-test" doc:id="76ca9c48-3807-451c-8ac8-1b2ea22d5767" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Request" doc:id="30492aea-dd29-4481-bb0b-b16753a6f4ea" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="fc74a1a3-f9be-4cbd-a395-80368de06814" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/plain --- readUrl('classpath://fetchdatafromservicetest/mock_payload.dwl')]" mediaType="text/plain" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://fetchdatafromservicetest/mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Transform Message" doc:id="3dbe2ac4-d62e-425a-856d-627f1b0fc930" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a1df5469-2737-40df-b422-13d4802041c6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="b23c7461-adce-4935-9e06-c06c75bbfcd1" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="6d925c9b-03e7-4913-95c3-08983a94be91" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="f9c4cec4-f146-409e-b046-274e7a20ef04" >
				<munit:payload value="#[output application/java --- readUrl('classpath://fetchdatafromservicetest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/java" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to fetch-data-from-service" doc:id="b6041290-f423-4d6b-9b20-dcb07e1c4399" name="fetch-data-from-service"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6fcf6a14-6234-4de9-961e-35f2fa8f56af" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import fetchdatafromservicetest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Transform Message" doc:id="40612406-6f71-4ec0-9f94-af69fdd811e2" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a1df5469-2737-40df-b422-13d4802041c6" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>
